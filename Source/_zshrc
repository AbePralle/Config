set -o vi
bindkey "^R" history-incremental-search-backward

export HISTFILE=~/.zsh_history
export HISTSIZE=100
export SAVEHIST=100

# Command prompt
precmd()
{
  #echo -ne "\e]1;$(grogo tab title $COLUMNS $LINES)\a"
  #echo -ne "\e]1;$(dirs -p | head -1) - $COLUMNS\x78$LINES\a"
  #echo -ne "\e]1;$(dirs -p | head -1) - $COLUMNS\x78$LINES\a"
  print ""
}

PROMPT="%~> "

setopt interactive_comments

#alias ep="nogui-mvim ~/.zshrc && source ~/.zshrc"
alias erc="vim ~/.zshrc && source ~/.zshrc"

alias doglog="mvim ~/Dropbox/Documents/Misc/DogLog.txt"
alias eaa="mvim ~/Dropbox/AnecdotalAbe/Podcasts/Script.txt"
alias edreams="mvim ~/Dropbox/Documents/DreamJournal/2023.txt"
alias evision="mvim ~/Dropbox/Documents/Vision.txt"
alias eg="mvim ~/Dropbox/Code/Grogo/Build.rogue"
alias esrc="mvim ~/Dropbox/Documents/Misc/SourceMessages.txt"
alias erants="mvim ~/Dropbox/Documents/AprilLee/Rants.txt"
alias erecipes="mvim ~/Dropbox/Documents/Recipes.txt"
alias elight="mvim ~/Dropbox/Documents/Light.txt"
alias enotes="mvim ~/Dropbox/Documents/Notes.txt"
alias grogo="rogo --build=~/Dropbox/Code/Grogo/Build.rogue \"$@\""
alias md="open -a /Applications/MacDown.app"
alias ql="qlmanage"
alias vscode="open -a /Applications/Visual\ Studio\ Code.app \"$@\""
alias rogolibs="(cdrogue && rogo libs)"
alias makegif="grogo make gif $1 $2"

alias sshabe="(cd ~/.ssh && rogo abe)"
alias sshbrom="(cd ~/.ssh && rogo brom)"

alias cdlog="cd ~/Projects/Games/AxorTheMightyGD/Devlog/Week7"
alias elog="mvim ~/Projects/Games/AxorTheMightyGD/Devlog/Week7/Log.txt"

alias cdaxor="cd ~/Projects/Games/AxorTheMighty"
alias cdaxorgd="cd ~/Projects/Games/AxorTheMightyGD"
alias cdaxorart="cd ~/Projects/Games/AxorTheMightyArt"
alias cdboss="cd ~/Projects/Boss"
alias cdbrom="cd ~/Projects/Web/brombres"
alias cdpcore="cd ~/Projects/Plasmacore"
alias cdwarlock="cd ~/Projects/Warlock"
alias ewarlock="cdwarlock && mvim -p Source/Main.rogue Libraries/Warlock/Libraries/Rogue/Warlock/Warlock.rogue ~/Projects/Games/AxorTheMighty/Libraries/Plasmacore/Libraries/Rogue/Plasmacore/Plasmacore.rogue"
alias cdplaydate="cd /Users/abe/Developer/PlaydateSDK"
alias cdr2="cd ~/Projects/R2"
alias cdrogue="cd ~/Projects/Rogue"
alias cdtools="cd ~/Projects/Tools"
alias cdvimage="cd ~/Projects/Tools/Vimage"
alias notify="say -v Samantha Done"
alias edraft="mvim ~/Dropbox/Misc/Draft.txt"

alias roguelibs="(cdrogue && rogo libs)"

alias gitco="git checkout"
alias gitd="git diff"
alias gitlog='git log --date=format:"%Y.%m.%d" --pretty=format:"%Cgreen%h%Creset -%C(yellow)%d%Creset %<|($(($COLUMNS-40)))%s %C(cyan)(%cd) %C(green)<%an>%Creset" --abbrev-commit'
alias gits="git status"
alias gitundocommit="git reset --soft HEAD~"
alias gitbranches="git fetch --all && git branch -a"
alias gitb="git branch"
alias gitrmlocal="git branch -d"
alias gitcp="git cherry-pick"
alias dnd="grogo dnd"
alias demo="grogo demo"

alias h="history -200 | grogo cull history"
alias mvimit="history -20 | grogo mvimit $1"
alias mvimp="grogo mvimpb $1"
alias pbj="grogo pbj"
alias pbp="grogo pbp"

alias godocs="grogo gdoc"
alias cgrep="grogo cgrep"
alias rogrep="grogo rogrep"

alias bg="open ~/Dropbox/Programbling/Podcasts/DarkGrayBG.html"

function godot()
{
  if [ "$1" ]; then
    # project filepath given
    if [ -f "$1/project.godot" ]; then
      /Users/abe/Projects/Godot/bin/godot.macos.editor.arm64 "$1/project.godot";
    else
      /Users/abe/Projects/Godot/bin/godot.macos.editor.arm64 "$1";
    fi
  else
    # no arg; just run godot
    /Users/abe/Projects/Godot/bin/godot.macos.editor.arm64
  fi

  #if [ -f "project.godot" ]; then
  #  echo "project exists";
  #else
  #  echo "no bueno";
  #fi
}

function gitrmbranch()
{
  git push -d origin $1
  git branch -D $1
}

function gitdx()
{
  git diff -- . \'!$1\'
}

function gitkr()
{
  if [ -z "$1" ]; then
    open gitkraken://repo/$(pwd);
  else
    open gitkraken://repo/$(cd $1 && pwd);
  fi
}

function cdnew()
{
  mkdir -p $1
  cd $1
}

function mvimit()
{
  mvim $(!!)
}

function wbs()
{
  wordlebuddy solver $1
}

function wbl()
{
  wordlebuddy list $1 $2
}

function wblc()
{
  wordlebuddy list $1 containing $2 $3
}

function wbv()
{
  wordlebuddy variations $1
}

function gitlogfiles()
{
  git log --date=format:"%Y.%m.%d" --pretty=format:"%Cgreen%h%Creset -%C(yellow)%d%Creset %<|($(($COLUMNS-40)))%s %C(cyan)(%cd) %C(green)<%an>%Creset" --abbrev-commit --name-status $@;
}

function gitlogvs()
{
  git cherry -v $1 `git symbolic-ref --short HEAD`
}

function gitpushthis()
{
  git push origin `git symbolic-ref --short HEAD` $@
}

function gitpushup()
{
  git push -u origin `git symbolic-ref --short HEAD`
}

function gitrebasevs()
{
  git rebase -i `gitlogvs $1 | head -1 | head -c 42 | tail -c 40`^
}

source /Users/abe/Library/emsdk/emsdk_env.sh >& /dev/null

export ANDROID_HOME=~/Library/Android/sdk
export ANDROID_SDK_ROOT=~/Library/Android/sdk
export PATH=$ANDROID_HOME/cmdline-tools/latest/bin/:$PATH
export PATH=$ANDROID_HOME/emulator/:$PATH
export PATH=$ANDROID_HOME/platform-tools/:$PATH

export VISUAL=vim
export EDITOR="$VISUAL"

export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
export PATH="/opt/morlock/bin:$PATH"

# Auto SSH/SFTP login:
# Add ssh public key to server's .ssh/authorized_keys

# post brew install python3
# If you need to have openjdk first in your PATH, run:
#  echo 'export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"' >> ~/.zshrc
#
#For compilers to find openjdk you may need to set:
#  export CPPFLAGS="-I/opt/homebrew/opt/openjdk/include"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

